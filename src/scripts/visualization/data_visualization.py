# -*- coding: utf-8 -*-
"""data_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12jsnWw_6NFGOvax_ikIW8q2LtwVpYDU0
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns

# --------------------------------------------------------------
# Load data
# --------------------------------------------------------------
df = pd.read_pickle("/content/01_data_processed.pkl")
df.head()

df["intensity"] = df.intensity.replace(regex = {r"medium.*": "medium", r"heavy.*": "heavy"})

# --------------------------------------------------------------
# Plot single columns
# --------------------------------------------------------------
df_set_1 = df[df["ind"] == 2]

plt.plot(df_set_1["acc_y"].reset_index(drop = True), )

# --------------------------------------------------------------
# Plot all exercises
# --------------------------------------------------------------
labels = df.excercise.unique()

for label in labels:
  subset = df[df.excercise == label]
  fig, ax = plt.subplots()
  plt.plot(subset[:100]["acc_y"].reset_index(drop = True), label = label)
  plt.legend()
  plt.show()

# --------------------------------------------------------------
# Adjust plot settings
# --------------------------------------------------------------
mpl.style.use("seaborn-v0_8-deep")
mpl.rcParams["figure.figsize"] = (20, 5)
mpl.rcParams["figure.dpi"] = 100

# --------------------------------------------------------------
# Compare medium vs. heavy sets
# --------------------------------------------------------------
category_df = df.query("excercise == 'squat'").query("participant == 'A'").reset_index()
fig, ax = plt.subplots()
category_df.groupby("intensity").acc_y.plot()
plt.xlabel("Samples")
plt.ylabel("Accn_Y")
plt.legend()
plt.show()

# --------------------------------------------------------------
# Compare participants
# --------------------------------------------------------------
participants_df = df.query("excercise == 'bench'").sort_values("participant").reset_index()
fig, ax = plt.subplots()
participants_df.groupby("participant").acc_y.plot()
plt.xlabel("Samples")
plt.ylabel("Accn_Y")
plt.legend()
plt.show()

# --------------------------------------------------------------
# Plot multiple axis
# --------------------------------------------------------------
excercise = "squat"
participant = "A"

query_df = df.query(f"excercise == '{excercise}'").query(f"participant =='{participant}'").reset_index()
query_df[["acc_x","acc_y","acc_z"]].plot()
plt.xlabel("Samples")
plt.legend()
plt.show()

# --------------------------------------------------------------
# Create a loop to plot all combinations per sensor
# --------------------------------------------------------------
excercises = df.excercise.unique()
participants = df.participant.unique()

for excercise in excercises:
  for participant in participants:
    query_df = df.query(f"excercise == '{excercise}'").query(f"participant =='{participant}'").reset_index()
    if len(query_df) > 0:
      query_df[["acc_x","acc_y","acc_z"]].plot()
      plt.xlabel("Samples")
      plt.legend()
      plt.title(f"{excercise}, {participant}")
      plt.show()

for excercise in excercises:
  for participant in participants:
    query_df = df.query(f"excercise == '{excercise}'").query(f"participant =='{participant}'").reset_index()
    if len(query_df) > 0:
      query_df[["gyro_x","gyro_y","gyro_z"]].plot()
      plt.xlabel("Samples")
      plt.legend()
      plt.title(f"{excercise}, {participant}")
      plt.show()

# --------------------------------------------------------------
# Combine plots in one figure
# --------------------------------------------------------------
excercises = df.excercise.unique()
participants = df.participant.unique()

for excercise in excercises:
  for participant in participants:
    query_df = df.query(f"excercise == '{excercise}'").query(f"participant =='{participant}'").reset_index(drop = True)

    if len(query_df) > 0:
      fig, ax = plt.subplots(nrows = 2, sharex = True, figsize = [20, 10])
      query_df[["acc_x","acc_y","acc_z"]].plot(ax = ax[0])
      query_df[["gyro_x","gyro_y","gyro_z"]].plot(ax = ax[1])

      ax[0].legend(loc="upper center", bbox_to_anchor=(0.5, 1.15), ncol=3, fancybox=True, shadow=True)
      ax[1].legend(loc="upper center", bbox_to_anchor= (0.5, 1.15), ncol=3, fancybox=True, shadow=True)
      ax[1].set_xlabel("samples")

      plt.savefig(f"/content/reports/figures/{excercise}_{[participant]}.png")
      plt.show()

