# -*- coding: utf-8 -*-
"""fitness_tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_7FGzwtCaQQFVN7mEMYve-qOmw5jS5K

1.
Download dataset and put in → data/raw

2.
Open VS Code workspace

3.
Create a new Conda environment from the environment.yml file

Make sure to also activate the environment in your VS Code workspace (I forgot to show this in the video)

4.
Open file src/data/make_dataset.py

5.
Understanding the CSV files (measurement, participant, exercise, intensity)

6.
Understanding the data transformation (supervised learning)

7.
Terminology — sets, reps, intensity

8.
Read single CSV file

9.
Extract features from filename

10.
Read all files

11.
Working with datetimes

12.
Creating a custom function

13.
Merge datasets

14.
Resample data (frequency conversion)

15.
Export intermediate dataset
"""

!unzip /content/MetaMotion.zip

import pandas as pd
from glob import glob

# --------------------------------------------------------------
# Read single CSV file
# --------------------------------------------------------------
f = pd.read_csv("/content/MetaMotion/A-bench-heavy2-rpe8_MetaWear_2019-01-11T16.10.08.270_C42732BE255C_Accelerometer_12.500Hz_1.4.4.csv")

# --------------------------------------------------------------
# List all data in data/raw/MetaMotion
# --------------------------------------------------------------
from os import listdir
from os.path import isfile, join
mypath = "/content/MetaMotion"
onlyfiles = [join(mypath, f) for f in listdir(mypath) if isfile(join(mypath, f))]
filnames = [f.split("/")[-1][0:-4] for f in listdir(mypath) if isfile(join(mypath, f))]
print(onlyfiles)

# --------------------------------------------------------------
# Extract features from filename
# Extract participant, excercise label and set intensity from filename
# Read all files
# --------------------------------------------------------------
df_acc = pd.DataFrame()
df_gyro = pd.DataFrame()
acc_ind = 1
gyro_ind = 1


for f in onlyfiles:
  temp = f.split("/")[-1][:-4].split("_")
  sensor = temp[-3]
  temp = temp[0].split("-")
  participant = temp[0]
  excercise = temp[1]
  intensity = temp[2]

  df = pd.read_csv(f)
  df["participant"] = participant
  df["excercise"] = excercise
  df["intensity"] = intensity

  if sensor == "Gyroscope":
    df["ind"] = gyro_ind
    gyro_ind += 1
    df_gyro = pd.concat([df_gyro, df])
  else:
    df["ind"] = acc_ind
    acc_ind += 1
    df_acc = pd.concat([df_acc, df])

# --------------------------------------------------------------
# Working with datetimes
# --------------------------------------------------------------
df_acc.index = pd.to_datetime(df_acc['epoch (ms)'], unit='ms')
df_gyro.index = pd.to_datetime(df_gyro['epoch (ms)'], unit='ms')

del df_acc["epoch (ms)"]
del df_acc['elapsed (s)']
del df_acc['time (01:00)']

del df_gyro["epoch (ms)"]
del df_gyro['elapsed (s)']
del df_gyro['time (01:00)']

# --------------------------------------------------------
# Turn into function
# --------------------------------------------------------------
from os import listdir
from os.path import isfile, join
mypath = "/content/MetaMotion"
onlyfiles = [join(mypath, f) for f in listdir(mypath) if isfile(join(mypath, f))]

def df_from_files(onlyfiles):
  df_acc = pd.DataFrame()
  df_gyro = pd.DataFrame()
  acc_ind = 1
  gyro_ind = 1


  for f in onlyfiles:
    temp = f.split("/")[-1][:-4].split("_")
    sensor = temp[-3]
    temp = temp[0].split("-")
    participant = temp[0]
    excercise = temp[1]
    intensity = temp[2]

    df = pd.read_csv(f)
    df["participant"] = participant
    df["excercise"] = excercise
    df["intensity"] = intensity


    if sensor == "Gyroscope":
      df["ind"] = gyro_ind
      gyro_ind += 1
      df_gyro = pd.concat([df_gyro, df])
    else:
      df["ind"] = acc_ind
      acc_ind += 1
      df_acc = pd.concat([df_acc, df])

  df_acc.index = pd.to_datetime(df_acc['epoch (ms)'], unit='ms')
  df_gyro.index = pd.to_datetime(df_gyro['epoch (ms)'], unit='ms')

  del df_acc["epoch (ms)"]
  del df_acc['elapsed (s)']
  del df_acc['time (01:00)']

  del df_gyro["epoch (ms)"]
  del df_gyro['elapsed (s)']
  del df_gyro['time (01:00)']

  return df_gyro, df_acc

df_gyro, df_acc = df_from_files(onlyfiles)

print(df_gyro.shape, df_acc.shape)

# --------------------------------------------------------------
# Merging datasets
# --------------------------------------------------------------
df = pd.concat([df_acc.iloc[:,0:3], df_gyro], axis = 1)

#  Since most data is not going to be synced to the millisecond since, the sensos are not synced
df.dropna() # We see that most data is lost

# Change column names
df.columns = [
    "acc_x",
    "acc_y",
    'acc_z',
    "gyro_x",
    "gyro_y",
    "gyro_z",
    "participant",
    "excercise",
    "intensity",
    "ind"
]

display(df.head())

# --------------------------------------------------------------
# Resample data (frequency conversion)
# --------------------------------------------------------------

# Accelerometer:    12.500HZ
# Gyroscope:        25.000Hz

# Create a function for resampling
def resampling(df):
  sampling_rule = {"acc_x":"mean",
                   "acc_y":"mean",
                   'acc_z':"mean",
                   "gyro_x":"mean",
                   "gyro_y":"mean",
                   "gyro_z":"mean",
                   "participant":"last",
                   "excercise":"last",
                   "intensity":"last",
                   "ind":"last"
                   }
  # Split the data by days
  days = [g for n, g in df.groupby(pd.Grouper(freq="D"))]
  df = pd.concat([day.resample(rule="200ms").apply(sampling_rule).dropna() for day in days])
  return(df)

df_resampled = resampling(df)
df_resampled.info()
# Changing ind to int

df_resampled["ind"] = df_resampled["ind"].astype("int")

# --------------------------------------------------------------
# Export dataset
# --------------------------------------------------------------
df_resampled.info()
df_resampled.to_pickle("01_data_processed.pkl")

